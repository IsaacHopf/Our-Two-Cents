@implements IAsyncDisposable
@inherits BudgetApp.Pages.Shared.JSInteropComponent<TransactionsGrid>
@inject CategoriesRepository CategoriesRepository
@inject IScrollManager ScrollManager
@inject ISnackbar Snackbar

<MudStack Row="true" Spacing="0" Class="h-100" Style="overflow-x: hidden;">
    
<MudDataGrid @ref="_gridRef" @onclick="EnableEdit" CommittedItemChanges="@OnTransactionChanged" Items="@Transactions"
             ReadOnly="@(!_editable)" EditMode="DataGridEditMode.Cell" Hover="true" Bordered="true" Dense="true" Elevation="0"
             Class="w-100 mud-data-grid-edit-onclick"
             Style="@(Income ? "background-color: var(--mud-palette-success-hover)" : "background-color: var(--mud-palette-error-hover)")">
    
    <ToolBarContent>
        @if (Income)
        {
            <MudTooltip Text="Add Income (Enter)" Delay="650">
                <MudFab OnClick="@AddTransactionAsync" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Add" Color="Color.Success" Class="me-4"/>
            </MudTooltip>
            if (FixedTransactions is not null)
            {
                <MudTooltip Text="Add Fixed Income" Delay="650">
                    <MudFab OnClick="@AddFixedTransactionsAsync" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PushPin" Color="Color.Success"/>
                </MudTooltip>
            }
        }
        else
        {
            <MudTooltip Text="Add Expense (Enter)" Delay="650">
                <MudFab OnClick="@AddTransactionAsync" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Add" Color="Color.Error" Class="me-4"/>
            </MudTooltip>
            if (FixedTransactions is not null)
            {
                <MudTooltip Text="Add Fixed Expenses" Delay="650">
                    <MudFab OnClick="@AddFixedTransactionsAsync" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PushPin" Color="Color.Error"/>
                </MudTooltip>
            }
            @if (!HideChart)
            {
                <div class="ms-auto">
                    <MudTooltip Text="@(_showChart ? "Hide Chart" : "Show Chart")" Delay="650" Class="ms-auto">
                        <MudButton OnClick="@(() => _showChart = !_showChart)" Variant="Variant.Text">
                            <MudStack Row="true" Spacing="0">
                                <MudIcon Icon="@Icons.Material.Rounded.PieChart" Color="Color.Default"/>
                                @if (_showChart)
                                {
                                    <MudIcon Icon="@Icons.Material.Rounded.KeyboardArrowRight" Color="Color.Default"/>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Rounded.KeyboardArrowLeft" Color="Color.Default"/>
                                }
                            </MudStack>
                        </MudButton>
                    </MudTooltip>
                </div> 
            }
        }
    </ToolBarContent>
    
    <Columns>
        <PropertyColumn Property="x => x.Source" Required="false"/>
        <PropertyColumn Property="x => x.Amount" Format="C">
            <EditTemplate>
                <MudNumericField T="decimal" Value="context.Item.Amount" Min="0" Format="C"
                                 ValueChanged="x => 
                                 { 
                                     context.Item.Amount = x; 
                                     _gridRef!.CommittedItemChanges.InvokeAsync(context.Item); 
                                 }"/>
            </EditTemplate>
        </PropertyColumn>
        @if (!Income)
        {
            <PropertyColumn Property="x => x.Category" Comparer="@(new CategoryComparer())">
                <CellTemplate>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <div style="background-color: @context.Item.Category.Color; width: 1rem; height: 1rem;" class="rounded"></div>
                        <span>@context.Item.Category.Name</span>
                    </MudStack>
                </CellTemplate>
                <EditTemplate>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <div style="background-color: @context.Item.Category.Color; width: .875rem; height: .875rem;" class="rounded"></div>
                        @* Modal must be false or else edit mode will be disabled when clicking on MudAutocomplete. *@
                        <MudAutocomplete T="Category" Value="@context.Item.Category" Modal="false"
                                         ValueChanged="x => 
                                         { 
                                             context.Item.Category = x;
                                             _gridRef!.CommittedItemChanges.InvokeAsync(context.Item);
                                         }"
                                         SearchFunc="@GetCategoriesAsync" ToStringFunc="x => x.Name" 
                                         SelectOnActivation="true" SelectValueOnTab="true" Required="true">
                            <ItemTemplate Context="e">
                                <MudText Class="mud-data-grid-edit-onclick" Style="font-size: .875rem;">@e.Name</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudStack>
                </EditTemplate>
            </PropertyColumn>
        }
        <PropertyColumn Property="x => x.Date" Format="MMM. d">
            <EditTemplate>
                <MudNumericField T="int?" Min="1" Value="context.Item.Date?.Day"
                                 ValueChanged="x => 
                                 { 
                                     try 
                                     { 
                                         context.Item.Date = x is null ? null : new DateTime(Year, Month, x.Value); 
                                         _gridRef!.CommittedItemChanges.InvokeAsync(context.Item); 
                                     }
                                     catch (ArgumentOutOfRangeException) 
                                     { 
                                         context.Item.Date = new DateTime(Year, Month, DateTime.DaysInMonth(Year, Month));
                                     } 
                                 }"/>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn>
            <EditTemplate>
                @if (Income)
                {
                    <MudTooltip Text="Delete Income" Delay="650">
                        <MudIconButton OnClick="@(() => DeleteTransaction(context.Item))" Icon="@Icons.Material.Rounded.Delete"
                                       Size="Size.Small" Color="@Color.Error" Class="pa-0 ma-0 opacity-75"/>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Delete Expense" Delay="650">
                        <MudIconButton OnClick="@(() => DeleteTransaction(context.Item))" Icon="@Icons.Material.Rounded.Delete"
                                       Size="Size.Small" Color="@Color.Error" Class="pa-0 ma-0 opacity-75"/>
                    </MudTooltip>
                }
            </EditTemplate>
        </TemplateColumn>
    </Columns>
    
</MudDataGrid>

@if (_showChart)
{
    <MudPaper Class="pa-6" Elevation="0">
        <TotalExpensesByCategoryChart Budget="@Budget" IsTableBelowChart="true"/>
    </MudPaper>
}
</MudStack>

@code {
    /// <summary>Indicates whether the transactions are income or expenses.</summary>
    [Parameter] public bool Income { get; set; } = true;
    [Parameter] public required int Year { get; set; }
    [Parameter] public required int Month { get; set; }
    [Parameter] public required Budget Budget { get; set; }
    [Parameter] public required ObservableCollection<Transaction> Transactions { get; set; }
    [Parameter] public IEnumerable<Transaction>? FixedTransactions { get; set; }
    [Parameter] public EventCallback<Transaction> OnTransactionChanged { get; set; }
    [Parameter] public EventCallback OnDisableEdit { get; set; }
    [Parameter] public bool HideChart { get; set; }

    private List<Category> _categories = [];
    private MudDataGrid<Transaction>? _gridRef;
    private bool _editable = false;
    private bool _showChart = false;

    protected override async Task OnInitializedAsync()
    {
        // Used for toggling edit.
        await InvokeJSFunctionWithCallbackAsync(
            this, 
            "executeCallbackOnEditMudDataGridOutsideClick", 
            nameof(DisableEditAsync));

        // Used for adding new records on enter.
        await InvokeJSFunctionWithCallbackAsync(
            this, 
            "executeCallbackOnEditMudDataGridEnter", 
            nameof(AddTransactionAsync));
        
        _categories = await CategoriesRepository.ReadAsync();
    }

    private Task<IEnumerable<Category>> GetCategoriesAsync(string searchValue, CancellationToken cancellationToken)
    {
        return Task.FromResult(string.IsNullOrEmpty(searchValue)
            ? (IEnumerable<Category>)_categories
            : (IEnumerable<Category>)_categories.OrderByDescending(x => x.Name.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase)));
        //: _categories.Where(x => x.Name.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase)));
    }

    /// <summary>
    /// Transactions are added by pressing the button or pressing enter while focus is on the grid.
    /// </summary>
    /// <remarks>
    /// This functionality uses JSRuntime to work. <see cref="OnInitializedAsync"/>
    /// invokes a JS function, which is defined in "wwwroot/scripts/keyboard-shortcuts.js"/>.
    /// </remarks>
    [JSInvokable]
    public async Task AddTransactionAsync()
    {
        Transactions.Add(Income 
            ? new Transaction(0, string.Empty, _categories.Find(x => x.Name == "Income") ?? new Category("Income")) 
            : new Transaction(0, string.Empty, _categories.Find(x => x.Name == "Misc.") ?? _categories.Last()));

        // Needed when adding transactions with "Enter" key.
        StateHasChanged();
        
        EnableEdit();
        await ScrollToBottomAsync();
    }

    private async Task AddFixedTransactionsAsync()
    {
        if (FixedTransactions == null || !FixedTransactions.Any()) return;

        if (!FixedTransactions.Except(Transactions, new TransactionComparer()).Any())
        {
            Snackbar.Add($"Fixed {(Income ? "Income" : "Expenses")} already added.", Severity.Info);
            return;
        }

        foreach (var transaction in FixedTransactions) Transactions.Add(transaction);

        await OnTransactionChanged.InvokeAsync();
        
        EnableEdit();
        await ScrollToBottomAsync();
    }

    private void DeleteTransaction(Transaction? transaction)
    {
        if (transaction is null) return;
        Transactions.Remove(transaction);
        OnTransactionChanged.InvokeAsync();
    }

    private void EnableEdit()
    {
        _editable = true;
    }
    
    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(100);
        await ScrollManager.ScrollToBottomAsync("main", ScrollBehavior.Smooth);
    }

    /// <summary>
    /// Edit is disabled by clicking somewhere outside the grid.
    /// </summary>
    /// <remarks>
    /// This functionality uses JSRuntime to work. <see cref="OnInitializedAsync"/>
    /// invokes a JS function, which is defined in "wwwroot/scripts/keyboard-shortcuts.js"/>.
    /// </remarks>
    [JSInvokable]
    public async Task DisableEditAsync()
    {
        if (_editable)
        {
            _editable = false;
            await OnDisableEdit.InvokeAsync();
        }
    }

    /// <remarks>
    /// Disabling edit on dispose ensures that editing is gracefully disabled if the user navigates 
    /// to a different page or anything else that causes the component to be disposed.
    /// </remarks>
    public async ValueTask DisposeAsync()
    {
        await DisableEditAsync();
    }
}