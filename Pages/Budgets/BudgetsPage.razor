@inject BudgetsRepository BudgetsRepository
@inject FixedBudgetRepository FixedBudgetRepository
@inject IDialogService DialogService
@using BudgetApp.Pages.Budgets.Components

@page "/budgets"

<MudText Typo="Typo.h4" Class="mb-4">Budgets</MudText>

<MudStack Row Spacing="4" AlignItems="AlignItems.Center" Justify="Justify.Center" StretchItems="StretchItems.Middle" Class="mb-4">

    <MudTooltip Text="Create Budget" Delay="650">
        <MudIconButton OnClick="@OpenCreateDialog" Icon="@Icons.Material.Rounded.Add" Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" Class="rounded-circle"/>
    </MudTooltip>
    <MudNumericField T="int?" Value="@_year" ValueChanged="@YearValueChangedHandler" Immediate="true" DebounceInterval="250"
                     Min="2000" Max="9999" Format="D4" Label="Year" Variant="Variant.Filled" Clearable="true" Margin="Margin.Dense"/>
    @if (_showDelete)
    {
        <MudTooltip Text="Delete Budgets" Delay="650">
            <MudIconButton OnClick="@OpenDeleteDialog" Icon="@Icons.Material.Rounded.Delete" Color="Color.Error" Size="Size.Large" Variant="Variant.Filled" Class="rounded-circle"/>
        </MudTooltip>
    }
</MudStack>

@if (_isLoading)
{
    <MudStack AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mt-6" />
    </MudStack>
}
else
{
    <MudList T="string">
        <MudDivider />
        @foreach (var item in _budgetNameItems)
        {
            <MudStack Row StretchItems="StretchItems.Start" AlignItems="AlignItems.Center" Spacing="0">
                <MudListItem Text="@item.Name" Href=@($"/budgets/{item.Name}")/>
                <MudCheckBox T="bool" Value="@item.IsSelected" ValueChanged="@(value => IsSelectedValueChangedHandler(item, value))" 
                             Size="Size.Medium" Dense="true" Class="opacity-50 ps-3 pe-3"/>
            </MudStack>
            <MudDivider />
        }
    </MudList>
}


@code {
    private int? _year = DateTime.Today.Year;
    private bool _isLoading = true;
    /// <remarks>Must be a list. Otherwise, the checkboxes don't update.</remarks>
    private List<BudgetNameItem> _budgetNameItems = [];
    private bool _showDelete = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Update all current budgets to include Category based on the Type.
        
        // var budgets = await BudgetsRepository.Query().ToListAsync();
        // foreach (var budget in budgets)
        // {
        //     foreach (var expense in budget.Expenses)
        //     {
        //         var type = expense.Type;
        //
        //         Category? category = type switch
        //         {
        //             "Living" => new Category("Living", "#cc6666", Guid.Parse("70167ea0-be92-4e7c-b5c0-afd3fc5c5a08")),
        //             "Groceries" => new Category("Groceries", "#ff9966", Guid.Parse("400a8592-75d3-4ab8-8e9f-c2fcb6406efa")),
        //             "Amazon" => new Category("Amazon", "#f5cb7d", Guid.Parse("59ac4128-749d-4aa0-a386-fc370cb32183")),
        //             "Recreation" => new Category("Recreation", "#87a96b", Guid.Parse("4f00cfbb-4f9a-451f-84d5-7c0c8b40c7d4")),
        //             "Cat Supplies" => new Category("Cat Supplies", "#a1caf1", Guid.Parse("4751cb06-4922-409f-9006-f94f78533c2d")),
        //             "Investments" => new Category("Investments", "#a2a2d0", Guid.Parse("c20df993-6076-4e99-89e6-2d8eb66f8ff6")),
        //             "Medical" => new Category("Medical", "#cba0de", Guid.Parse("a732cc9f-e5ff-473a-8c7f-780448980a88")),
        //             "Misc." => new Category("Misc.", "#f4c2c2", Guid.Parse("f0d78a99-ef10-4957-90fe-1a4c8790ef6e")),
        //             _ => null
        //         };
        //
        //         expense.Category = category;
        //     }
        // }
        //
        // foreach (var budget in budgets)
        //     await BudgetsRepository.UpsertAsync(budget);
        //
        // var fixedBudget = await FixedBudgetRepository.GetAsync();
        //
        // foreach (var expense in fixedBudget.Expenses)
        // {
        //     var type = expense.Type;
        //
        //     Category? category = type switch
        //     {
        //         "Living" => new Category("Living", "#cc6666", Guid.Parse("70167ea0-be92-4e7c-b5c0-afd3fc5c5a08")),
        //         "Groceries" => new Category("Groceries", "#ff9966", Guid.Parse("400a8592-75d3-4ab8-8e9f-c2fcb6406efa")),
        //         "Amazon" => new Category("Amazon", "#f5cb7d", Guid.Parse("59ac4128-749d-4aa0-a386-fc370cb32183")),
        //         "Recreation" => new Category("Recreation", "#87a96b", Guid.Parse("4f00cfbb-4f9a-451f-84d5-7c0c8b40c7d4")),
        //         "Cat Expenses" => new Category("Cat Expenses", "#a1caf1", Guid.Parse("4751cb06-4922-409f-9006-f94f78533c2d")),
        //         "Investments" => new Category("Investments", "#a2a2d0", Guid.Parse("c20df993-6076-4e99-89e6-2d8eb66f8ff6")),
        //         "Medical" => new Category("Medical", "#cba0de", Guid.Parse("a732cc9f-e5ff-473a-8c7f-780448980a88")),
        //         "Misc." => new Category("Misc.", "#f4c2c2", Guid.Parse("f0d78a99-ef10-4957-90fe-1a4c8790ef6e")),
        //         _ => null
        //     };
        //
        //     expense.Category = category;
        // }
        //
        // await FixedBudgetRepository.UpsertAsync(fixedBudget);
        
        await SetBudgetNameItemsAsync();
    }

    private async Task SetBudgetNameItemsAsync()
    {
        var query = _year is null
            ? BudgetsRepository.Query().OrderByDescending(x => x.Year).ThenByDescending(x => x.Month)
            : BudgetsRepository.Query().Where(x => x.Year == (int)_year).OrderByDescending(x => x.Month);
        
        var budgetNames = await query.Select(x => x.Name).ToEnumerableAsync();
        _budgetNameItems = budgetNames.Select(name => new BudgetNameItem(name)).ToList();

        _isLoading = false;
    }

    private async Task YearValueChangedHandler(int? year)
    {
        _year = year;
        await SetBudgetNameItemsAsync();
        _showDelete = false;
    }

    private void IsSelectedValueChangedHandler(BudgetNameItem item, bool isSelected)
    {
        item.IsSelected = isSelected;
        _showDelete = _budgetNameItems.Any(x => x.IsSelected);
    }

    private Task OpenCreateDialog()
    {
        var existingBudgetNames = _budgetNameItems.Select(x => x.Name);
        var parameters = new DialogParameters<CreateBudgetDialog> { { x => x.ExistingBudgetNames, existingBudgetNames } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter };
        return DialogService.ShowAsync<CreateBudgetDialog>("Create Budget", parameters, options);
    }

    private Task OpenDeleteDialog()
    {
        var budgetNamesToDelete = _budgetNameItems.Where(x => x.IsSelected).Select(x => x.Name);
        var parameters = new DialogParameters<DeleteBudgetsDialog> { { x => x.BudgetNamesToDelete, budgetNamesToDelete } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter };
        return DialogService.ShowAsync<DeleteBudgetsDialog>("Delete Budgets", parameters, options);
    }

    public class BudgetNameItem(string name)
    {
        public string Name { get; set; } = name;
        public bool IsSelected { get; set; } = false;
    }
}