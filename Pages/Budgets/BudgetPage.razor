@inject BudgetsRepository BudgetsRepository
@inject FixedBudgetRepository FixedBudgetRepository
@inject ISnackbar Snackbar
@using BudgetApp.Pages.Budgets.Components

@page "/budgets/{budgetName}"

<MudStack Row="true" Spacing="6">
    <ReadOnlyCurrencyTextField Value="@_budget?.TotalIncome" Label="Total Income"/>
    <ReadOnlyCurrencyTextField Value="@(_budget?.TotalExpenses * -1)" Label="Total Expenses"/>
    <ReadOnlyCurrencyTextField Value="@_budget?.Net" Label="Net"/>
</MudStack>

@if (_budget is null)
{
    <MudStack AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mt-6" />
    </MudStack>
}
else
{
    <MudTabs Rounded="true" Position="Position.Left" Elevation="1" ApplyEffectsToContainer="true" Class="mt-6" MinimumTabWidth="40px">
        <MudTabPanel Text="Income" Icon="@Icons.Material.Rounded.AttachMoney">
            <TransactionsGrid Income="true" Year="@_budget.Year" Month="@_budget.Month" 
                              Transactions="@_incomes" FixedTransactions="@_fixedBudget?.Incomes" 
                              OnTransactionChanged="@UpdateIncome" OnDisableEdit="@SaveBudgetAsync"/>
        </MudTabPanel>
        <MudTabPanel Text="Expenses" Icon="@Icons.Material.Rounded.MoneyOff">
            <TransactionsGrid Income="false" Year="@_budget.Year" Month="@_budget.Month" 
                              Transactions="@_expenses" FixedTransactions="@_fixedBudget?.Expenses" 
                              OnTransactionChanged="@UpdateExpenses" OnDisableEdit="@SaveBudgetAsync"/>
        </MudTabPanel>
        <MudTabPanel Text="Categories" Icon="@Icons.Material.Rounded.GroupWork">
            <MudPaper Class="w-100 pa-6">
                <TotalAmountByCategoriesGrid Budget="@_budget"/>
            </MudPaper>
        </MudTabPanel>
        <MudTabPanel Text="Notes" Icon="@Icons.Material.Rounded.Notes">
            <MudPaper Class="w-100">
                <MudTextField T="string?" Value="@_budget.Notes" ValueChanged="@UpdateNotes" OnBlur="@SaveBudgetAsync" 
                              Variant="Variant.Outlined" Lines="10" AutoGrow="true" />
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public required string BudgetName { get; set; }

    private Budget? _budget;
    private ObservableCollection<Transaction> _incomes = [];
    private ObservableCollection<Transaction> _expenses = [];
    private bool _hasBudgetChanged = false;

    private FixedBudget? _fixedBudget;
    
    protected override async Task OnInitializedAsync()
    {
        _budget = await BudgetsRepository.ReadAsync(BudgetName);
        _incomes = new ObservableCollection<Transaction>(_budget.Incomes);
        _expenses = new ObservableCollection<Transaction>(_budget.Expenses);

        _fixedBudget = await FixedBudgetRepository.ReadAsync();
        _fixedBudget.Incomes.ForEach(transaction =>
        {
            transaction.Date = transaction.Date.HasValue 
                ? new DateTime(_budget.Year, _budget.Month, transaction.Date.Value.Day) : null;
        });
        _fixedBudget.Expenses.ForEach(transaction =>
        {
            transaction.Date = transaction.Date.HasValue 
                ? new DateTime(_budget.Year, _budget.Month, transaction.Date.Value.Day) : null;
        });
    }

    private void UpdateIncome()
    {
        _budget!.Incomes = _incomes.ToList();
        _hasBudgetChanged = true;
    }

    private void UpdateExpenses()
    {
        _budget!.Expenses = _expenses.ToList();
        _hasBudgetChanged = true;
    }

    private void UpdateNotes(string? notes)
    {
        if (_budget!.Notes == notes) return;
        
        _budget!.Notes = notes;
        _hasBudgetChanged = true;
    }
    
    private async Task SaveBudgetAsync()
    {
        if (!_hasBudgetChanged)
        {
            Snackbar.Add("No changes to save.", Severity.Info);
            return;
        }

        await BudgetsRepository.UpsertAsync(_budget!);

        _hasBudgetChanged = false;
        Snackbar.Add("Budget saved!", Severity.Success);
    }
}